"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _KnxReadDeviceResource = _interopRequireDefault(require("../__KnxReadOperations/KnxReadDeviceResource"));

var _KnxConstants = _interopRequireDefault(require("../../KnxConstants"));

var _KnxWriteDeviceResource = _interopRequireDefault(require("../__KnxWriteOperations/KnxWriteDeviceResource"));

var _lodash = _interopRequireDefault(require("lodash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * This file contains functions to interact with a devices Run State Machine
 * Information on this can be found in README-operation_rawmod.md
 */

/*
 * Returns the RSM state of the given device
 * when retval.error is not set:
 *  retval.data will contain the raw-data returned from the device
 *  retval.runstate will contain the state of the RSM
 * if it is:
 *  retval.data will be unset
 *  retval.runstate will be undefined
 */
const getRSMState = async (target, source, maskVersion, recvTimeout, conContext, errContext, preferredReadType = _KnxConstants.default.RESOURCE_ACCESS_TYPES.ALL) => {
  // Read it
  const retval = await _KnxReadDeviceResource.default.readDeviceResource(target, source, maskVersion, 'ApplicationRunStatus', preferredReadType, recvTimeout, conContext, errContext); // Check if data was returned - if so, copy the runstate into a separate field

  if (retval.data && retval.data.length > 0) {
    retval.runstate = _lodash.default.last(retval.data);
  }

  return retval;
};
/*
 * Send a command to the LSM of the given device
 * command => One of KnxConstants.KNX_RSM_CMDS
 */


const sendRSMCMD = (target, source, maskVersion, recvTimeout, command, conContext, errContext, preferredWriteType = _KnxConstants.default.RESOURCE_ACCESS_TYPES.ALL) => {
  const wval = Buffer.from([command]); // Write it and pass the result trough

  return _KnxWriteDeviceResource.default.writeDeviceResource(target, source, maskVersion, 'ApplicationRunStatus', preferredWriteType, wval, recvTimeout, conContext, errContext);
};

var _default = {
  getRSMState: getRSMState,
  sendRSMCMD: sendRSMCMD
};
exports.default = _default;